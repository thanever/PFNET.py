{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ejemplos de uso del PFNET en archivos del PSSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pfnet\n",
    "parser_psse=pfnet.PyParserRAW()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### POWER FLOW\n",
    "se carga el archivo case_4_gs y se corre un flujo de potencia. Se compara luego las diferencias entre PSSE y PFNET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "case data: 0    100.00  33  0  1  60.00\n",
      "record 1: CASE_4GS\n",
      "record 2: TEST_PARSER_PSSE->PFNET\n",
      "parsed 4 buses\n",
      "parsed 4 loads\n",
      "parsed 0 fixed shunts\n",
      "parsed 2 generators\n",
      "parsed 4 branches\n",
      "parsed 0 transformers\n",
      "parsed 0 areas\n",
      "parsed 0 zones\n",
      "parsed 0 owners\n",
      "parsed 0 switched shunts\n",
      "un-parsed lines:\n",
      "  Q\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Cargar caso\n",
    "\n",
    "filename='C:\\\\Users\\\\Barberia Juan Luis\\\\Desktop\\\\case_4_gs.raw'\n",
    "net=parser_psse.parse(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import hstack\n",
    "from numpy.linalg import norm\n",
    "from scipy.sparse import bmat\n",
    "from scipy.sparse.linalg import spsolve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.00141820234221 0.00158415905405\n"
     ]
    }
   ],
   "source": [
    "#Formulacion del PF\n",
    "\n",
    "# bus voltage angles\n",
    "net.set_flags('bus','variable','not slack','voltage angle')\n",
    "    \n",
    "# bus voltage magnitudes\n",
    "net.set_flags('bus','variable','not regulated by generator','voltage magnitude')\n",
    "    \n",
    "# slack gens active powers\n",
    "net.set_flags('generator','variable','slack','active power')\n",
    "    \n",
    "# regulator gens reactive powers\n",
    "net.set_flags('generator','variable','regulator','reactive power')\n",
    "\n",
    "p = pfnet.Problem(net)\n",
    "p.add_constraint(pfnet.Constraint('AC power balance', net))  \n",
    "p.add_constraint(pfnet.Constraint('generator active power participation', net))\n",
    "p.add_constraint(pfnet.Constraint('PVPQ switching',net))\n",
    "#p.add_heuristic(pfnet.Heuristic('PVPQ switching', net))\n",
    "\n",
    "p.analyze()\n",
    "    \n",
    "x = p.get_init_point()\n",
    "p.eval(x)\n",
    "\n",
    "residual = lambda x: hstack((p.A*x-p.b, p.f))\n",
    "\n",
    "while norm(residual(x)) > 1e-4:\n",
    "    \n",
    "    #p.apply_heuristics(x)\n",
    "    \n",
    "    x = x + spsolve(bmat([[p.A],[p.J]],format='csr'), -residual(x))\n",
    "    p.eval(x)\n",
    "\n",
    "net.set_var_values(x)\n",
    "net.update_properties()\n",
    "\n",
    "print net.bus_P_mis, net.bus_Q_mis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1.02, -0.05287404832866612)\n",
      "(0.8514056118545462, -0.1052643680362006)\n",
      "(0.8506175003820202, -0.17754183336499804)\n",
      "(1.0, 0.0)\n"
     ]
    }
   ],
   "source": [
    "for BUS in net.buses:\n",
    "    print(BUS.v_mag,BUS.v_ang)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3.18, 2.2257787326038017)\n",
      "(2.1910599660520163, 1.759345382356607)\n"
     ]
    }
   ],
   "source": [
    "for GEN in net.generators:\n",
    "    print(GEN.P,GEN.Q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
